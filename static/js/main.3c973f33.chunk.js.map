{"version":3,"sources":["Display.js","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","React","useState","show","setShow","Alert","variant","Heading","className","Button","onClick","Display","Navbar","bg","expand","Brand","Component","pads","start","sound","wrong","Q","url","W","E","A","S","D","Z","X","C","DrumPad","state","usedPadName","makeButton","padName","Col","id","type","handleClick","onKeyDown","keyPressed","src","e","key","toUpperCase","audioClip","document","getElementById","currentTime","play","setState","clipName","charAt","length","this","Container","Row","App","displayState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c973f33.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Alert, Navbar, Button } from \"react-bootstrap\";\n\nexport function Instructions() {\n  const [show, setShow] = React.useState(true);\n  return (\n    <>\n      <Alert show={show} variant=\"success\">\n        <Alert.Heading>How to use the dr(u/ea)m machine</Alert.Heading>\n        <p>\n          To start, click on any drum pad to activate the drum machine, then you\n          can press your keyboard keys!\n        </p>\n        <hr />\n        <div className=\"d-flex justify-content-end\">\n          <Button onClick={() => setShow(false)} variant=\"outline-success\">\n            Got it!\n          </Button>\n        </div>\n      </Alert>\n      {!show && (\n        <Button variant=\"light\" onClick={() => setShow(true)}>\n          <sup>?</sup>\n        </Button>\n      )}\n    </>\n  );\n}\n\nclass Display extends Component {\n  render() {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>Dr(u/ea)m Machine</Navbar.Brand>\n        {/* <Alert variant=\"primary\" id=\"display\">\n          {this.props.children}\n        </Alert> */}\n      </Navbar>\n    );\n  }\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport { Button, Alert, Container, Row, Col } from \"react-bootstrap\";\n\nconst pads = {\n  start: {\n    sound: `Press a pad to start ðŸŽµ`,\n  },\n  wrong: {\n    sound: `Wrong key ðŸ’©`,\n  },\n  Q: {\n    sound: `Chord 1`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\n  },\n  W: {\n    sound: `Chord 2`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\",\n  },\n  E: {\n    sound: `Chord 3`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\",\n  },\n  A: {\n    sound: `Shaker`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\n  },\n  S: {\n    sound: `Open HH`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\",\n  },\n  D: {\n    sound: `Closed HH`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\n  },\n  Z: {\n    sound: `Punchy Kick`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\n  },\n  X: {\n    sound: `Side Stick`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n  },\n  C: {\n    sound: `Snare`,\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n  },\n};\n\nclass DrumPad extends Component {\n  state = {\n    usedPadName: \"start\",\n  };\n\n  makeButton = (padName) => {\n    return (\n      <Col className=\"p-1\">\n        <Button\n          className=\"drum-pad\"\n          id={`pad${padName}`}\n          variant=\"primary btn-lg btn-block py-5\"\n          type=\"submit\"\n          onClick={() => {\n            // this.handleDisplay();\n            this.handleClick(padName);\n          }}\n          onKeyDown={this.keyPressed}\n        >\n          {padName}\n          <audio\n            className=\"clip\"\n            id={padName}\n            src={pads[padName].url}\n            type=\"audio/mpeg\"\n          ></audio>\n        </Button>\n      </Col>\n    );\n  };\n\n  // display() {\n  //   console.log(\n  //     `DISPLAY: ${this.usedPadName} => ${pads[this.state.usedPadName].sound}`\n  //   );\n  //   return (\n  //     <Alert variant=\"primary\" id=\"display\">\n  //       HELLO WORLD Hello: {this.usedPadName}\n  //     </Alert>\n  //   );\n  // }\n\n  keyPressed = (e) => {\n    // console.log(e);\n    const padName = e.key.toUpperCase();\n    // console.log(padName);\n    const audioClip = document.getElementById(padName);\n    // console.log(`${padName} pressed!`);\n    switch (padName) {\n      case \"Q\":\n      case \"W\":\n      case \"E\":\n      case \"A\":\n      case \"S\":\n      case \"D\":\n      case \"Z\":\n      case \"X\":\n      case \"C\":\n        audioClip.currentTime = 0;\n        audioClip.play();\n        this.setState({\n          usedPadName: padName,\n        });\n        break;\n      default:\n        this.setState({\n          usedPadName: \"wrong\",\n        });\n        // console.log(`Wrong key ${padName}`);\n        break;\n    }\n  };\n\n  handleClick = (padName) => {\n    const clipName = padName.charAt(padName.length - 1);\n    const audioClip = document.getElementById(clipName);\n    // console.log(`${padName} clicked!`);\n    audioClip.currentTime = 0;\n    audioClip.play();\n    this.setState({\n      usedPadName: padName,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Alert variant=\"primary\" id=\"display\">\n          {pads[this.state.usedPadName].sound}\n        </Alert>\n        <br />\n        <Container>\n          <Row>\n            {this.makeButton(\"Q\")}\n            {this.makeButton(\"W\")}\n            {this.makeButton(\"E\")}\n          </Row>\n          <Row>\n            {this.makeButton(\"A\")}\n            {this.makeButton(\"S\")}\n            {this.makeButton(\"D\")}\n          </Row>\n          <Row>\n            {this.makeButton(\"Z\")}\n            {this.makeButton(\"X\")}\n            {this.makeButton(\"C\")}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default DrumPad;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport Display from \"./Display\";\nimport { Instructions } from \"./Display\";\nimport DrumPad from \"./DrumPad\";\n// import { Alert } from \"react-bootstrap\";\n// import \"./App.css\";\n\nclass App extends Component {\n  state = { displayState: \"this is display state\" };\n\n  // handleDisplay(e) {\n  //   this.setState({\n  //     displayState: \"It's working!!\",\n  //   });\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Display>{this.state.displayState}</Display>\n        <DrumPad />\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import Display from \"./Display\";\n// import DrumPad from \"./DrumPad\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"drum-machine\">\n      {/* <Display />\n      <DrumPad /> */}\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}